name: Deploy to Production

on:
  workflow_run:
    workflows: ["Build Production Windows Container"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: crystal-copilot-windows

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment: ${{ inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up environment variables
      run: |
        echo "DEPLOY_ENV=${{ inputs.environment || 'staging' }}" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_ENV
        
    - name: Generate Docker Compose for Windows
      run: |
        cat > docker-compose.windows.yml << 'COMPOSE_EOF'
        version: '3.8'
        
        services:
          crystal-copilot:
            image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ports:
              - "8000:8000"
            environment:
              - PORT=8000
              - ENVIRONMENT=${{ env.DEPLOY_ENV }}
            volumes:
              - ./reports:/app/reports:ro
              - ./logs:/app/logs
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "powershell", "-command", "try { Invoke-WebRequest -Uri 'http://localhost:8000/health' -UseBasicParsing } catch { exit 1 }"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 60s
            deploy:
              resources:
                limits:
                  memory: 4G
                reservations:
                  memory: 2G
        
        volumes:
          reports:
          logs:
        COMPOSE_EOF
        
    - name: Generate Windows Server Deployment Script
      run: |
        cat > deploy-windows-server.ps1 << 'PS1_EOF'
        # Crystal Copilot Windows Server Deployment Script
        param(
            [Parameter(Mandatory=$true)]
            [string]$ServerAddress,
            
            [Parameter(Mandatory=$false)]
            [string]$Environment = "staging"
        )
        
        Write-Host "🚀 Deploying Crystal Copilot to Windows Server: $ServerAddress"
        Write-Host "Environment: $Environment"
        Write-Host "=" * 60
        
        # Connect to Windows Server
        $session = New-PSSession -ComputerName $ServerAddress -Credential (Get-Credential)
        
        try {
            # Copy deployment files
            Write-Host "📁 Copying deployment files..."
            Copy-Item -Path "docker-compose.windows.yml" -Destination "C:\crystal-copilot\" -ToSession $session
            
            # Run deployment on remote server
            Invoke-Command -Session $session -ScriptBlock {
                param($ImageTag, $Env)
                
                Write-Host "🔄 Pulling latest container image..."
                docker pull $ImageTag
                
                Write-Host "🛑 Stopping existing services..."
                docker-compose -f C:\crystal-copilot\docker-compose.windows.yml down
                
                Write-Host "🚀 Starting new deployment..."
                Set-Location C:\crystal-copilot
                $env:DEPLOY_ENV = $Env
                docker-compose -f docker-compose.windows.yml up -d
                
                Write-Host "✅ Deployment complete!"
                
                # Health check
                Start-Sleep -Seconds 30
                try {
                    $response = Invoke-WebRequest -Uri "http://localhost:8000/health" -UseBasicParsing
                    if ($response.StatusCode -eq 200) {
                        Write-Host "✅ Health check passed!"
                    } else {
                        Write-Host "⚠️  Health check warning: Status $($response.StatusCode)"
                    }
                } catch {
                    Write-Host "❌ Health check failed: $($_.Exception.Message)"
                }
            } -ArgumentList "${{ env.IMAGE_TAG }}", $Environment
            
        } finally {
            Remove-PSSession $session
        }
        
        Write-Host "🎉 Deployment completed successfully!"
        PS1_EOF
        
    - name: Create Deployment Documentation
      run: |
        cat > DEPLOYMENT.md << 'DOC_EOF'
        # Crystal Copilot Production Deployment Guide
        
        ## 🚀 Automated Deployment via GitHub Actions
        
        ### Prerequisites
        - Windows Server 2019/2022 with Docker
        - Crystal Reports Runtime installed
        - Network access to GitHub Container Registry
        
        ### Deployment Methods
        
        #### Method 1: Docker Compose (Recommended)
        ```powershell
        # Pull the latest image
        docker pull ${{ env.IMAGE_TAG }}
        
        # Deploy using docker-compose
        docker-compose -f docker-compose.windows.yml up -d
        ```
        
        #### Method 2: Direct Docker Run
        ```powershell
        docker run -d --name crystal-copilot \
          -p 8000:8000 \
          -v ./reports:/app/reports:ro \
          -v ./logs:/app/logs \
          --restart unless-stopped \
          ${{ env.IMAGE_TAG }}
        ```
        
        #### Method 3: Windows Server Script
        ```powershell
        .\deploy-windows-server.ps1 -ServerAddress "your-server.com" -Environment "production"
        ```
        
        ## 🔧 Configuration
        
        ### Environment Variables
        - `PORT`: Server port (default: 8000)
        - `ENVIRONMENT`: Deployment environment (staging/production)
        - `CRYSTAL_RUNTIME_PATH`: Path to Crystal Reports runtime
        
        ### Volume Mounts
        - `/app/reports`: Mount your Crystal Reports files here
        - `/app/logs`: Application logs output
        
        ## 🌐 Accessing the Application
        
        - **Web Interface**: http://your-server:8000
        - **API Documentation**: http://your-server:8000/docs
        - **Health Check**: http://your-server:8000/health
        
        ## 📊 Monitoring
        
        ### Health Checks
        The container includes built-in health checks that verify:
        - FastAPI server responsiveness
        - Crystal Reports SDK availability
        - Report processing functionality
        
        ### Logs
        ```powershell
        # View container logs
        docker logs crystal-copilot
        
        # Follow logs in real-time
        docker logs -f crystal-copilot
        ```
        
        ## 🔄 Updates
        
        To update to the latest version:
        ```powershell
        docker-compose pull
        docker-compose up -d
        ```
        
        ## 🆘 Troubleshooting
        
        ### Common Issues
        1. **Crystal Reports SDK not found**
           - Ensure Crystal Reports Runtime is installed
           - Check CRYSTAL_RUNTIME_PATH environment variable
        
        2. **Port 8000 already in use**
           - Change port mapping: `-p 8080:8000`
        
        3. **Permission issues with reports folder**
           - Ensure proper folder permissions
           - Run container with appropriate user context
        
        ### Support
        - Check application logs: `docker logs crystal-copilot`
        - Run diagnostics: `docker exec crystal-copilot python test_container.py`
        DOC_EOF
        
    - name: Upload Deployment Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-${{ env.DEPLOY_ENV }}
        path: |
          docker-compose.windows.yml
          deploy-windows-server.ps1
          DEPLOYMENT.md
        retention-days: 90
        
    - name: Notify Deployment Status
      if: always()
      run: |
        echo "🎯 Deployment Status for ${{ env.DEPLOY_ENV }}: ${{ job.status }}"
        echo "📦 Image: ${{ env.IMAGE_TAG }}"
        echo "🌐 Ready for Windows Server deployment"
